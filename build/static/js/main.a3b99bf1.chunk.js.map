{"version":3,"sources":["Components/Controls/BrandControl/BrandControl.jsx","Components/Controls/SpinnerControl/SpinnerControl.jsx","Components/Map/Map.jsx","store/actions/Map.jsx","store/actions/actionTypes.js","App.js","serviceWorker.js","store/reducers/Map.jsx","store/store.js","index.js"],"names":["L","Control","BrandControl","extend","initialize","options","Util","setOptions","this","_container","onAdd","map","_map","DomUtil","create","innerHTML","control","brandControl","SpinnerControl","id","style","visibility","spinnerControl","Map","showLoadingSpinner","document","getElementById","hideLoadingSpinner","mbAttr","process","mbUrl","grayscale","tileLayer","attribution","darkscale","streets","center","zoom","layers","baseLayers","addTo","position","on","props","onSetMapVisible","className","isMapVisible","Component","connect","state","MapReducer","dispatch","type","actions","App","Boolean","window","location","hostname","match","initialState","setMapVisible","action","updatedState","reducer","composeEnhancers","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3b99bf1.chunk.js","sourcesContent":["import L from \"leaflet\";\r\nimport \"./BrandControl.css\";\r\n\r\nL.Control.BrandControl = L.Control.extend({\r\n\r\n    initialize: function (options) {\r\n        L.Util.setOptions(this, options);\r\n        this._container = null;\r\n    },\r\n\r\n    onAdd: function (map) {\r\n        this._map = map;\r\n        this._container = L.DomUtil.create('div', 'BrandControl');\r\n        this._container.innerHTML =\r\n            '<a href=\"https://www.linkedin.com/in/ibrahimhamid/\" target=\"_blank\">' +\r\n                '<img src=\"https://content.linkedin.com/content/dam/me/business/en-us/amp/brand-site/v2/bg/LI-Bug.svg.original.svg\"/>' +\r\n            '</a>';\r\n        return this._container;\r\n    },\r\n});\r\n\r\nL.control.brandControl = function (options) {\r\n    return new L.Control.BrandControl(options);\r\n};\r\n\r\n\r\nexport default L.control.brandControl;\r\n","import L from \"leaflet\";\r\nimport \"./SpinnerControl.css\";\r\n\r\nL.Control.SpinnerControl = L.Control.extend({\r\n\r\n    initialize: function (options) {\r\n        L.Util.setOptions(this, options);\r\n        this._container = null;\r\n    },\r\n\r\n    onAdd: function (map) {\r\n        this._map = map;\r\n        this._container = L.DomUtil.create('div', 'SpinnerControl');\r\n        this._container.id = \"SpinnerControl\";\r\n        this._container.style.visibility = 'hidden';\r\n        return this._container;\r\n    },\r\n});\r\n\r\nL.control.spinnerControl = function (options) {\r\n    return new L.Control.SpinnerControl(options);\r\n};\r\n\r\n\r\nexport default L.control.spinnerControl;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport L from 'leaflet';\r\nimport BrandControl from \"../Controls/BrandControl/BrandControl\";\r\nimport SpinnerControl from \"../Controls/SpinnerControl/SpinnerControl\";\r\nimport * as actions from \"../../store/actions\";\r\nimport \"./Map.css\";\r\n\r\nclass Map extends Component {\r\n    componentDidMount() {\r\n        const mbAttr = `${process.env.REACT_APP_NAME} v-${process.env.REACT_APP_VERSION}`,\r\n            mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';\r\n\r\n        const grayscale   = L.tileLayer(mbUrl, {id: 'mapbox/light-v9', attribution: mbAttr}),\r\n            darkscale   = L.tileLayer(mbUrl, {id: 'mapbox/dark-v9', attribution: mbAttr}),\r\n            streets  = L.tileLayer(mbUrl, {id: 'mapbox/streets-v11',   attribution: mbAttr});\r\n\r\n        // create map\r\n        this.map = L.map('map', {\r\n            center: [25, 25],\r\n            zoom: 4,\r\n            layers: [grayscale]\r\n        });\r\n        var baseLayers = {\r\n            \"Grayscale\": grayscale,\r\n            \"Darkscale\": darkscale,\r\n            \"Streets\": streets\r\n        };\r\n\r\n        L.control.layers(baseLayers).addTo(this.map);\r\n\r\n        BrandControl({position: 'bottomright'}).addTo(this.map);\r\n        SpinnerControl({position: 'topleft'}).addTo(this.map);\r\n\r\n        this.map.on('zoomstart movestart', () => {\r\n            this.showLoadingSpinner();\r\n        });\r\n        this.map.on('zoomend moveend', () => {\r\n            this.hideLoadingSpinner();\r\n        });\r\n        // Show Map\r\n        this.props.onSetMapVisible(true);\r\n    }\r\n\r\n    showLoadingSpinner = () => {\r\n        document.getElementById(\"SpinnerControl\").style.visibility = 'visible';\r\n    }\r\n    hideLoadingSpinner = () => {\r\n        document.getElementById(\"SpinnerControl\").style.visibility = 'hidden';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"map\" className=\"map\" style={{visibility: this.props.isMapVisible ? 'visible' : 'hidden' }}></div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isMapVisible: state.MapReducer.isMapVisible,\r\n    };\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSetMapVisible: (isMapVisible) => dispatch(actions.setMapVisible(isMapVisible)),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const setMapVisible = (isMapVisible) => {\r\n    return {\r\n        type: actionTypes.SET_MAP_VISIBLE,\r\n        isMapVisible: isMapVisible\r\n    };\r\n};","export const SET_MAP_VISIBLE = 'SET_MAP_VISIBLE';","import React, {Component} from 'react'\nimport Map from './Components/Map/Map';\n\nclass App extends Component {\n    render() {\n        return (\n            <Map/>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    isMapVisible: false,\r\n};\r\n\r\nconst setMapVisible = (state, action) => {\r\n    const updatedState = {isMapVisible: action.isMapVisible};\r\n    return {\r\n        ...state,\r\n        ...updatedState\r\n    };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SET_MAP_VISIBLE:\r\n            return setMapVisible(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import {createStore, applyMiddleware, compose, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport MapReducer from './reducers/Map';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || null : compose;\r\nconst rootReducer = combineReducers({\r\n    MapReducer: MapReducer,\r\n});\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store/store';\n\nconst app = (\n    <Provider store={store}>\n            <App/>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}